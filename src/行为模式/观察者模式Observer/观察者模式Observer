观察者模式（Observer）
发布-订阅模式（Publish/Subscribe）
模型-视图模式（Model/View）
源-监听器模式（Source/Listener）
从属者模式（Dependents）

1）意图
    定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。当这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能自动更新自己。
2）JDK支持
    2.1）java.util.Observable  --  被观察者
         java.util.Observer    --  观察者接口
         
    2.2）基于观察者模型的委派事件模型（Delegation Event Model，简称DEM）
    
         发布者  -》事件源（event source）
         订阅者  -》事件监听器（event listener）
         java.util.EventObject  --  事件对象
         java.util.EventListener --  事件监听器接口
         
         以Java的Swing为例：
         当事件源对象的内部状态发生变化时，会根据需要创建一个代表其状态变化的事件对象，并将其传给所有登记过的事件接收者对象。
         事件源对象：继承了java.awt.Component的AWT构件。
         事件对象：继承了java.util.EventObject的事件类。（封装了事件的源对象与事件监听器对象所需要的事件信息）
         事件监听器对象：实现了java.util.EventListener接口。（当事件发生时被调用的对象）。
         
         事件源对象          ---------- 事件对象 ------------> 事件监听器对象
         java.awt.Component      java.util.EventObject    java.util.EventListener
3）术语
  抽象主题对象（抽象被观察者对象）
	主题对象（被观察者对象）
	抽象观察者对象
	观察者对象
  客户端
4）使用Java对观察者模式的支持
	4.1）创建被观察者对象（继承java.util.Observable）
	4.2）创建观察者对象（实现java.util.Observer），一般地将被观察者对象做为参数传递给观察者对象的构造函数中，完成观察者登记。
	4.3）客户端修改被观察者对象状态。
	4.4）通知观察者对象做出更新。（setChange和notifyObservers方法）



